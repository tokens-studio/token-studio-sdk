# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type APIKey {
  description: String
  id: ID!
  name: String!
  value: String!
}

input APIKeyInput {
  description: String
  name: String!
}

type APIKeyWithoutValue {
  description: String
  id: ID!
  lastUsed: DateTimeISO
  name: String!
}

type Branch {
	branchedAt: DateTimeISO
	config(name: String!): SDConfig!
	configs(limit: Int = 25, page: Int = 1): PaginatedSDConfigs!
	createdAt: DateTimeISO!
	icons(name: String!): PaginatedIcons!
	isDefault: Boolean!
	name: String!
	organizationId: String!
	projectId: String!
	themeGroups(limit: Int = 25, page: Int = 1): PaginatedThemeGroups!
	tokenSet(path: String!): TokensSet!
	tokenSets(
		filter: TokenSetsFilterInput
		limit: Int = 25
		page: Int = 1
	): PaginatedSets!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DeleteSetTransaction {
	completed: DateTimeISO!
	sets: [TokensSet!]!
}

type DeletedSDConfig {
	branch: String!
	name: String!
	organizationId: String!
	projectId: String!
}

input FileInput {
	data: String!
	name: String!
	type: String!
}

type Group {
	createdAt: DateTimeISO
	description: String
	icon: String
	id: ID!
	members(limit: Int = 25, page: Int = 1): PaginatedUsers!
	name: String!
}

input GroupInput {
	description: String
	icon: String
	name: String!
}

input GroupUpdateInput {
	description: String
	icon: String
	id: String!
	name: String!
}

type Icon {
	name: String!
	path: String!
	raw: String!
}

type Invitation {
	confirmCode: String

	"""
	Only present when invited by email
	"""
	email: String
	id: ID!
	organizationId: String!
	status: InvitationStatus!
}

"""
The status of the invitation
"""
enum InvitationStatus {
	ACCEPTED
	DECLINED
	PENDING
}

"""
Custom scalar type for JSON objects
"""
scalar JSON

type Mutation {
	acceptInvitation(confirmCode: String!, id: String!): Organization!
	addMemberToGroup(
		"""
		The user Id to add to the group
		"""
		entity: String!
		group: String!
		organization: String!
	): Group!
	createAPIKey(input: APIKeyInput!): APIKey!
	createGroup(input: GroupInput!, organization: String!): Group!
	createOrganization(input: OrganizationInput!): Organization!
	createPolicy(input: PolicyInput!, organization: String!): Policy!
	createProject(input: ProjectInput!, organization: String!): Project!
	createRelease(
		input: ReleaseInput!
		organization: String!
		project: String!
	): Release!
	createSDConfig(
		branch: String
		id: String!
		input: SDConfigInput!
		organization: String!
	): SDConfig!
	createThemeGroup(
		branch: String
		input: ThemeGroupInput!
		organization: String!
		project: String!
	): ThemeGroup!
	createToken(
		branch: String!
		organization: String!
		path: String!
		project: String!
	): Token!
	createTokenSet(
		branch: String
		input: TokenSetInput!
		organization: String!
		project: String!
	): TokensSet!
	declineInvitation(code: String!, id: String!): DateTimeISO!
	deleteAPIKey(id: String!): APIKeyWithoutValue!
	deleteAllSets(
		branch: String!
		organization: String!
		path: String!
		project: String!
	): DeleteSetTransaction!
	deleteGroup(id: String!, organization: String!): Group!
	deleteInvitation(id: String!, organization: String!): Invitation!
	deleteOrganization(organization: String!): Organization!
	deletePolicy(id: String!, organization: String!): Policy!
	deleteProject(id: String!, organization: String!): Project!
	deleteSDConfig(
		branch: String
		name: String!
		organization: String!
		project: String!
	): DeletedSDConfig!
	deleteSet(
		branch: String!
		organization: String!
		path: String!
		project: String!
	): TokensSet!
	deleteThemeGroup(
		branch: String!
		organization: String!
		project: String!
		themeGroupName: String!
	): ThemeGroup!
	inviteToOrganization(email: String!, organization: String!): Invitation!
	regenerateApiKey(id: String!): APIKeyWithoutValue!
	removeFromOrganization(organization: String!, user: String!): Transaction!
	removeMemberFromGroup(
		"""
		The user Id to add to the group
		"""
		entity: String!
		group: String!
		organization: String!
	): Group!
	resendInvitation(id: String!, organization: String!): Invitation!
	updateGroup(input: GroupUpdateInput!, organization: String!): Group!
	updateOrganization(
		input: OrganizationInput!
		organization: String!
	): Organization!
	updatePolicy(id: String!, input: PolicyInput!, organization: String!): Policy!
	updateProject(
		id: String!
		input: UpdateProjectInput!
		organization: String!
	): Project!
	updateSelf(input: UpdateSelfInput!): DateTimeISO!
	updateThemeGroup(
		branch: String
		input: ThemeGroupUpdateInput!
		organization: String!
		project: String!
	): ThemeGroup!
	updateTokenSet(
		branch: String
		input: TokenSetUpdateInput!
		organization: String!
		project: String!
	): TokensSet!
	updateTokenSetsOrder(
		branch: String
		organization: String!
		project: String!
		updates: [TokenSetOrderInput!]!
	): [TokensSet!]!
}

enum OrgTier {
	ENTERPRISE
	FREE
	HOBBY
	STUDIO
}

type Organization {
	createdAt: DateTimeISO
	description: String

	"""
	Groups of the organization
	"""
	groups(limit: Int = 25, page: Int = 1): PaginatedGroups!
	icon: String
	id: ID!
	name: String!
	payment: String

	"""
	Projects inside the organization
	"""
	projects(
		filter: ProjectFilterInput
		limit: Int = 25
		page: Int = 1
	): PaginatedProjects!
	ssoEnabled: Boolean
	tier: OrgTier!

	"""
	Users of the organization
	"""
	users(
		filter: UserFilterInput
		limit: Int = 25
		page: Int = 1
	): PaginatedUsers!
	visibility: Visibility
}

input OrganizationInput {
	description: String

	"""
	Base64 encoded image data
	"""
	icon: String
	name: String!
}

type PaginatedAPIKeyWithoutValue {
	currentPage: Int!
	data: [APIKeyWithoutValue!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedBranches {
	currentPage: Int!
	data: [Branch!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedGroups {
	currentPage: Int!
	data: [Group!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedIcons {
	currentPage: Int!
	data: [Icon!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedInvitations {
	currentPage: Int!
	data: [Invitation!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedOrganization {
	currentPage: Int!
	data: [Organization!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedPolicies {
	currentPage: Int!
	data: [Policy!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedProjects {
	currentPage: Int!
	data: [Project!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedReleases {
	currentPage: Int!
	data: [Release!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedSDConfigs {
	currentPage: Int!
	data: [SDConfig!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedSets {
	currentPage: Int!
	data: [TokensSet!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedThemeGroups {
	currentPage: Int!
	data: [ThemeGroup!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type PaginatedUsers {
	currentPage: Int!
	data: [User!]!
	lastPage: Int!
	nextPage: Int
	prevPage: Int
	total: Int!
	totalPages: Int!
}

type Policy {
	createdAt: DateTimeISO!
	description: String
	id: ID!
	name: String!
	value: JSON!
}

input PolicyDocInput {
	statement: [PolicyStatementInput!]!
	version: String!
}

input PolicyInput {
	description: String
	name: String!
	value: PolicyDocInput!
}

input PolicyStatementInput {
	action: [String!]!
	effect: String!
	resource: [String!]
}

type Project {
	branch(name: String): Branch!
	branches(limit: Int = 25, page: Int = 1): PaginatedBranches!
	defaultBranchName: String!
	description: String!
	icon: String
	id: ID!
	name: String!
	organizationId: String!
	release(version: String): Release!
	releases(limit: Int = 25, page: Int = 1): PaginatedReleases!
	visibility: Visibility!
}

input ProjectFilterInput {
	name: StringFilterInput
	visibility: VisibilityInput
}

input ProjectInput {
	description: String
	icon: FileInput
	name: String!
	visibility: Visibility! = PRIVATE
}

type PublicApi {
	"""
	Public organizations
	"""
	organizations(
		filter: String
		limit: Int = 25
		page: Int = 1
	): PaginatedOrganization!

	"""
	Public users
	"""
	users(limit: Int = 25, page: Int = 1): PaginatedUsers!
}

type Query {
	branch(id: String!, name: String, project: String!): Branch!
	group(id: String!, organization: String!): Group!
	groups(
		filter: Float
		limit: Int = 25
		organization: String!
		page: Int = 1
	): PaginatedGroups!
	organization(id: String!): Organization!
	organizations(limit: Int = 25, page: Int = 1): PaginatedOrganization!
	policies(
		limit: Int = 25
		organization: String!
		page: Int = 1
	): PaginatedPolicies!
	policy(id: String!, organization: String!): Policy!
	project(id: String!, organization: String!): Project!
	projects(
		filter: Float
		limit: Int = 25
		organization: String!
		page: Int = 1
	): PaginatedProjects!
	public: PublicApi!
	self: Self!
	userInvitations(
		limit: Int = 25
		organization: String!
		page: Int = 1
	): PaginatedInvitations!
}

type Release {
	createdAt: DateTimeISO!
	description: String
	modifiedAt: Float
	projectId: String!
	releasedBy: User!
	version: String!
}

input ReleaseInput {
	"""
	A description of the release in markdown.
	"""
	description: String

	"""
	An optional human readable name for the release.
	"""
	name: String

	"""
	The new version of the release. Must be a valid semver version.
	"""
	version: String!
}

type SDConfig {
	branch: String!
	config: JSON!
	functions: String!
	name: String!
	organizationId: String!
	projectId: String!
}

input SDConfigInput {
	config: JSON!
	description: String
	functions: String!
	name: String!
	themeOptions: JSON!
}

type Self {
	"""
	A single API Key
	"""
	apiKey(id: String!): APIKeyWithoutValue!

	"""
	The api keys owned by the user
	"""
	apiKeys(limit: Int = 25, page: Int = 1): PaginatedAPIKeyWithoutValue!
	id: String!
	invitations(limit: Int = 25, page: Int = 1): PaginatedInvitations!

	"""
	The underlying user
	"""
	user: User!
}

input StringFilterInput {
	eq: String
	ne: String
	startsWith: String
}

type Subscription {
	onCreateGroup(organization: String!): Group!
	onCreateProject(organization: String!): Project!
}

type ThemeGroup {
	createdAt: DateTimeISO!
	id: String!
	name: String!
	options: [ThemeOption!]
	updatedAt: DateTimeISO!
}

input ThemeGroupInput {
	name: String!
	options: [ThemeOptionInput!]!
}

input ThemeGroupUpdateInput {
	name: String!
	newName: String
	options: [ThemeOptionInput!]!
}

type ThemeOption {
	figmaStyleReferences: JSON
	figmaVariableReferences: JSON
	name: String!
	selectedTokenSets: JSON
}

input ThemeOptionInput {
	figmaStyleReferences: JSON
	figmaVariableReferences: JSON
	name: String!
	selectedTokenSets: JSON
}

type Token {
	description: String
	extensions: JSON
	name: String!
	type: String!
	value: JSON!
}

input TokenSetInput {
	orderIndex: Int
	path: String!
	raw: JSON
	type: TokenSetType
}

input TokenSetOrderInput {
	orderIndex: Float!
	path: String!
}

enum TokenSetType {
	Dynamic
	Static
}

input TokenSetUpdateInput {
	newPath: String
	orderIndex: Int
	path: String!
	raw: JSON
	type: TokenSetType
}

input TokenSetsFilterInput {
	name: StringFilterInput
}

type TokensSet {
	createdAt: DateTimeISO!
	generatorId: String!
	id: String!
	name: String!
	orderIndex: Int!

	"""
	The raw json data of the set
	"""
	raw: JSON
	sha: String!

	"""
	The transformed tokens of the set
	"""
	tokens: [Token!]!
	type: TokenSetType!
	updatedAt: DateTimeISO!
}

type Transaction {
  id: String!
}

input UpdateProjectInput {
  description: String
  icon: FileInput
  name: String
  visibility: Visibility
}

input UpdateSelfInput {
  """Optional User description"""
  description: String

  """A preferred name of the user"""
  givenName: String

  """An icon in base64 format"""
  icon: String

  """Display name of the user"""
  name: String

  """Visibility of the user to search"""
  visibility: Visibility
}

type User {
  description: String

  """A preferred name of the user"""
  givenName: String

  """Groups the user is part of"""
  groups(limit: Int = 25, organization: String!, page: Int = 1): PaginatedGroups

  """The icon of the user as html link to an image"""
  icon: String

  """The icon of the user as html link to an image"""
  id: ID!

  """Display name of the user"""
  name: String!
}

input UserFilterInput {
  name: StringFilterInput
}

"""The visibility options"""
enum Visibility {
  PRIVATE
  PUBLIC
}

input VisibilityInput {
  eq: Visibility!
}