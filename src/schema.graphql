# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type APIKeyWithoutValue {
  description: String
  id: ID!
  lastUsed: DateTimeISO
  name: String!
}

type Branch {
  branchedAt: DateTimeISO
  createdAt: DateTimeISO!
  isDefault: Boolean!
  name: String!
  organizationId: String!
  projectId: String!
  sets(limit: Float = 25, offset: Float = 0): PaginatedSets!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.This scalar is serialized to a string in ISO 8601 format and parsed from a string in ISO 8601 format.
"""
scalar DateTimeISO

type DeletedSDConfig {
  branch: String!
  name: String!
  organizationId: String!
  projectId: String!
}

input FileInput {
  data: String!
  name: String!
  type: String!
}

type Group {
  createdAt: DateTimeISO
  description: String
  icon: String
  id: ID!
  name: String!
}

input GroupInput {
  description: String
  icon: String
  name: String!
}

input GroupUpdateInput {
  description: String
  icon: String
  id: String!
  name: String!
}

type Invitation {
  confirmCode: String
  id: ID!
  organizationId: String!
  status: InvitationStatus!
}

"""The status of the invitation"""
enum InvitationStatus {
  ACCEPTED
  DECLINED
  PENDING
}

"""Custom scalar type for JSON objects"""
scalar JSON

type Mutation {
  acceptInvitation(confirmCode: String!, id: String!): Organization!
  addMemberToGroup(
    """The user Id to add to the group"""
    entity: String!
    group: String!
    organization: String!
  ): Group!
  createGroup(input: GroupInput!, organization: String!): Group!
  createOrganization(input: OrganizationInput!): Organization!
  createPolicy(input: PolicyInput!, organization: String!): Policy!
  createProject(input: ProjectInput!, organization: String!): Project!
  createSDConfig(branch: String, id: String!, input: SDConfigInput!, organization: String!): SDConfig!
  createToken(branch: String!, organization: String!, path: String!, project: String!): Token!
  createTokenSet(branch: String, input: TokenSetInput!, organization: String!, project: String!): Set!
  declineInvitation(id: String!): DateTimeISO!
  deleteGroup(input: GroupInput!, organization: String!): Group!
  deleteProject(id: String!, organization: String!): Project!
  deleteSDConfig(branch: String, id: String!, name: String!, organization: String!): DeletedSDConfig!
  deleteSet(branch: String!, organization: String!, path: String!, project: String!): Set!
  inviteToOrganization(email: String!, organization: String!): Invitation!
  removeMemberFromGroup(
    """The user Id to add to the group"""
    entity: String!
    group: String!
    organization: String!
  ): Group!
  updateGroup(input: GroupUpdateInput!, organization: String!): Group!
  updateProject(id: String!, input: ProjectInput!, organization: String!): Project!
  updateSelf(input: UpdateSelfInput!): DateTimeISO!
  updateTokenSet(branch: String, input: TokenSetUpdateInput!, organization: String!, project: String!): Set!
}

enum OrgTier {
  ENTERPRISE
  FREE
  HOBBY
  STUDIO
}

type Organization {
  createdAt: DateTimeISO
  description: String
  icon: String
  id: ID!
  name: String
  payment: String

  """Projects inside the organization"""
  projects(filter: ProjectFilterInput, limit: Float = 25, offset: Float = 0): PaginatedProjects!
  ssoEnabled: Boolean
  tier: OrgTier!

  """Users of the organization"""
  users(filter: UserFilterInput, limit: Float = 25, offset: Float = 0): PaginatedUsers!
  visibility: Visibility
}

input OrganizationInput {
  description: String
  name: String!
  tier: OrgTier
}

type PaginatedGroups {
  currentPage: Int!
  data: [Group!]!
  lastPage: Int!
  nextPage: Int
  prevPage: Int
  total: Int!
  totalPages: Int!
}

type PaginatedInvitations {
  currentPage: Int!
  data: [Invitation!]!
  lastPage: Int!
  nextPage: Int
  prevPage: Int
  total: Int!
  totalPages: Int!
}

type PaginatedOrganization {
  currentPage: Int!
  data: [Organization!]!
  lastPage: Int!
  nextPage: Int
  prevPage: Int
  total: Int!
  totalPages: Int!
}

type PaginatedProjects {
  currentPage: Int!
  data: [Project!]!
  lastPage: Int!
  nextPage: Int
  prevPage: Int
  total: Int!
  totalPages: Int!
}

type PaginatedSets {
  currentPage: Int!
  data: [Set!]!
  lastPage: Int!
  nextPage: Int
  prevPage: Int
  total: Int!
  totalPages: Int!
}

type PaginatedUsers {
  currentPage: Int!
  data: [User!]!
  lastPage: Int!
  nextPage: Int
  prevPage: Int
  total: Int!
  totalPages: Int!
}

type Policy {
  createdAt: DateTimeISO!
  description: String
  id: ID!
  name: String!
  value: JSON!
}

input PolicyDocInput {
  statement: [PolicyStatementInput!]!
  version: String!
}

input PolicyInput {
  description: String
  name: String!
  value: PolicyDocInput!
}

input PolicyStatementInput {
  action: [String!]!
  effect: String!
  resource: [String!]
}

type Project {
  branch: Branch!
  branches: [Branch!]!
  defaultBranchName: String!
  description: String!
  icon: String
  id: ID!
  name: String!
  organizationId: String!
  visibility: Visibility!
}

input ProjectFilterInput {
  name: StringFilterInput
  visibility: VisibilityInput
}

input ProjectInput {
  description: String
  icon: FileInput
  name: String!
  visibility: Visibility!
}

type PublicApi {
  """Public organizations"""
  organizations(filter: String, limit: Float = 25, offset: Float = 0): PaginatedOrganization!

  """Public users"""
  users(limit: Float = 25, offset: Float = 0): PaginatedUsers!
}

type Query {
  groups(filter: Float, limit: Float = 25, offset: Float = 0, organization: String!): PaginatedGroups!
  organization(id: String!): [Organization!]!
  organizations(limit: Float = 25, offset: Float = 0): PaginatedOrganization!
  project(id: String!): Project!
  projects(filter: Float, limit: Float = 25, offset: Float = 0, organization: String!): PaginatedProjects!
  public: PublicApi!
  self: Self!
  userInvitations(limit: Float = 25, offset: Float = 0, organization: String!): PaginatedInvitations!
}

type SDConfig {
  branch: String!
  config: JSON!
  functions: String!
  isDefault: Boolean!
  name: String!
  organizationId: String!
  projectId: String!
}

input SDConfigInput {
  config: JSON!
  description: String
  functions: String!
  isDefault: Boolean!
  name: String!
  themeOptions: JSON!
}

type Self {
  """A single API Key"""
  apiKey(id: String!): APIKeyWithoutValue!

  """The api keys owned by the user"""
  apiKeys(limit: Float, offset: Float): [APIKeyWithoutValue!]!
  id: String!
  invitations(limit: Float = 25, offset: Float = 0): PaginatedInvitations!
}

type Set {
  createdAt: DateTimeISO!
  name: String!

  """The raw json data of the set"""
  raw: JSON!
  sha: String!

  """The transformed tokens of the set"""
  tokens: [Token!]!
  updatedAt: DateTimeISO!
}

input StringFilterInput {
  beginsWith: String
  eq: String
  ne: String
}

type Subscription {
  onCreateGroup(organization: String!): Group!
  onCreateProject(organization: String!): Project!
}

type Token {
  description: String
  extensions: JSON
  name: String!
  type: String!
  value: JSON!
}

input TokenSetInput {
  path: String!
  raw: JSON!
}

input TokenSetUpdateInput {
  newPath: String
  path: String!
  raw: JSON
}

input UpdateSelfInput {
  """Optional User description"""
  description: String

  """A preferred name of the user"""
  givenName: String

  """An icon in base64 format"""
  icon: String

  """Display name of the user"""
  name: String

  """Visibility of the user to search"""
  visibility: Visibility
}

type User {
  """A preferred name of the user"""
  givenName: String

  """Groups the user is part of"""
  groups(limit: Float = 25, offset: Float = 0, organization: String!): PaginatedGroups!

  """The icon of the user as html link to an image"""
  icon: String

  """The icon of the user as html link to an image"""
  id: ID!

  """Display name of the user"""
  name: String!
}

input UserFilterInput {
  name: StringFilterInput
}

"""The visibility options"""
enum Visibility {
  PRIVATE
  PUBLIC
}

input VisibilityInput {
  eq: Visibility!
}