name: Release

on:
  push:
    branches:
      - master

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  pages: write
  id-token: write
  contents: write
  pull-requests: write

jobs:
  release:
    if: github.repository == 'tokens-studio/token-studio-sdk'
    name: Release
    runs-on: ubuntu-latest
    environment:
      name: prod
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Enable corepack
        run:  corepack enable
      - name: Cache node modules
        id: cache-nodemodules
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          # caching node_modules
          path: node_modules
          key: ${{ runner.os }}-node-${{ env.cache-name }}-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.cache-name }}-

      - name: Install Dependencies
        if: steps.cache-nodemodules.outputs.cache-hit != 'true'
        run: yarn install --frozen-lockfile

      - name: Build dist
        run: yarn run build

      - name: Build docs
        run: yarn run docs

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.VAULT_URL }}
          role: ${{ vars.VAULT_ROLE }}
          method: jwt
          namespace: admin
          secrets: |
            secret/data/cicd/npm/root TOKEN | NPM_TOKEN;

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: yarn run release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NODE_AUTH_TOKEN: ${{ steps.secrets.outputs.NPM_TOKEN }}

      - name: Upload artifact
        if: steps.changesets.outputs.published == 'true'
        uses: actions/upload-pages-artifact@v1
        with:
          # Upload entire docs folder
          path: "./docs"
      - name: Deploy to GitHub Pages
        if: steps.changesets.outputs.published == 'true'
        id: deployment
        uses: actions/deploy-pages@v1
  techdocs: 
    name: Techdocs
    runs-on: ubuntu-latest
    env:
      ENTITY_NAMESPACE: 'default'
      ENTITY_KIND: 'component'
      ENTITY_NAME: 'token-studio-sdk'
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3

      - name: Build docs
        run: docker-compose run techdocs

      - name: Import Secrets
        id: secrets
        uses: hashicorp/vault-action@v2
        with:
          url: ${{ vars.VAULT_URL }}
          role: techdocs
          method: jwt
          namespace: admin
          secrets: |
           aws/prod/creds/R_kgDOJI661A-techdocs-deploy  access_key | AWS_ACCESS_KEY_ID ;
           aws/prod/creds/R_kgDOJI661A-techdocs-deploy  secret_key | AWS_SECRET_ACCESS_KEY ;
           aws/prod/creds/R_kgDOJI661A-techdocs-deploy  security_token | AWS_SESSION_TOKEN ;

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
             aws-access-key-id: ${{ steps.secrets.outputs.AWS_ACCESS_KEY_ID }}
             aws-secret-access-key: ${{ steps.secrets.outputs.AWS_SECRET_ACCESS_KEY }}
             aws-session-token: ${{ steps.secrets.outputs.AWS_SESSION_TOKEN }}
             aws-region: eu-central-1
      - name: Copy files to the production website with the AWS CLI
        run: |
             aws s3 sync ./techdocs s3://537243810878-prod-rkgdoji661a-s3/${ENTITY_NAMESPACE}/${ENTITY_KIND}/${ENTITY_NAME}/ --delete
     
      